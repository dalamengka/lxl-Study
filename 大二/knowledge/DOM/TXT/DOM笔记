第六章 DOM
6.1 DOM概述

6.1.1 DOM的概念
DOM文档对象模型,DOM对象不仅仅是一个普通的内置对象,它还是一个巨大的API的核心对象,它将文档的内容呈现在js面前,并赋予js操作文档的能力

6.1.2 DOM和JavaScript的关系
一个web页面是一个文档,这文档可以再浏览器窗口或者作为html源代码显示出来.但上述两种情况都是同一个文档,DOm提供了对同一份文档的另一种表现,
存储和操作的方式.DOM能够使用JavaScript脚本语言进行修改.

6.1.3 DOM节点
加载html页面是web浏览器生成一个树形结构,用来表示页面的内部结构.DOM将这种结构理解为节点组成.
根据W3C的html DOM标准,HTML文档找那个的所有内容都是节点.
>整个文档是一个文档节点=document
>每一个html元素是元素节点:div...
>html元素内的文本是文本节点
>每个html属性都是属性节点=id,src...
>注释也是节点,叫注释节点

6.1.4 DOM树
DOM树体现着html页面的层级结构,而DOM树有DOM文档树和DOM元素树两种,DOM元素树包含的
只有元素节点,而DOm文档树则包括DOM文档中的所有内容


6.2 获取和设置元素中的其他信息
6.2.1 getElementById('')
getElementById()的方法,接受一个参数:获取元素的id,如果找到相对应元素,则返回该元素的,否则返回null

6.2.2 用标签名获取元素
document.getElementsByTagName('');可以获取该元素名称下所有元素,返回一个伪数组,当元素只有一个的时候返回的也依然是一个数组,或者说是一个节点列表
不能直接.style,用for循环添加样式
在某一个元素中,并不是在全局文档中利用标签获取元素,这样更加精准.
现获取id,再从id元素里面ByTagName获取一定数量的元素

6.2.2 用id获取元素名
当我们使用id获取元素的时候,元素的名称还会和整个元素一起显示出来,如果想要拿到该元素的元素名,也就是标签名需要用tagName属性,但是只能获取不能设置

6.2.3 获取元素节点里的内容
当获取了元素之后,我们需要拿到元素的内容,则需要用另一种方法得到,元素的内容可能包括:文本或元素,需要innerHTML属性
innerHTML属性除了可以获取标签内的内容外,还可以设置标签内容
var a=document.getElementById('a);
console.log(a.innerHTML);
a.innerHTML='要变的内容';

6.2.4 获取元素节点中的文本
利用innerText属性或缺的只能是文本节点,不能是其他,当然innerText属性除了获取,也可以设置元素中的文本

#####6.2.4 用name属性值获取元素
getElementsByName()方法可以获取相同名称的name元素,返回一个伪数组对象.
<input type="radio" name="sex" value="0">男 
<input type="radio" name="sex" value="1">
var sex = document.getElementsByName('sex');
console.log(sex);

6.2.5 利用类名获取元素
document.getElementsByClassName('a');

6.2.6 用css选择器获取元素
document.querySelector(All)('#ul>li');
可以依靠选择器找到元素,但是不加All只能找到列表的第一个元素,注意,该方法性能没有直接利用标签寻找

6.2.7 获取元素类名
利用className属性获取元素的类名,以字符串形式返回=console.log(div.className);
同时可以设置新的class类名,需要注意的是返回值是一个字符串,如果更换其中一个类,则需要考虑该字符串中其他类是否已改一起设置

6.3.1 获取元素样式
style属性可以获取元素内联样式的所有属性,如果继续在style中找属性名,就可以得到该属性的值,以字符串形式返回
同时也可以设置该属性的样式,从而达到增加或更改样式.需要注意的是,以js形式增加的样式的优先级大于css优先级

6.3.2获取元素属性
.getAttribute('')返回值是字符串形式的属性值

6.3.3 设置元素属性
.setAttribute('要改的属性','新属性值')

6.3.4 删除元素属性
.removeAttribute('');在括号中放入需要删除的属性名,用引号包括


6.4 查找元素

6.4.1 创建元素节点
利用js创建一个元素的方法是,先在文档中创建一个标签,创建之后不是就存在了,而是需要将这个已经创建好的元素放到你想放到的父元素中去.
document.createTextNode(''),document.createTextNode(''),
//用一个变量承载在文档中'创建'的一个元素
var div = document.createElement('div');
//将已经创建的元素放在想放的位置
父元素.appendChild(div);

6.4.2 创建文本节点
document.createTextNode(''),利用js创建元素的文本节点,先在文档中创建文本然后插入到要放入的元素中

6.4.3 css样式赋予
div.style.cssText='width:**px;...';
它可以吧css层叠样式表中的css样式直接放在该属性后,就不需要一条一条去赋予了,可一次性赋予

6.4.4 在某元素插入创建新的元素
insertBefore(,)这个函数和appendChild()用法基本一致,都是向父元素中插入一个子元素,但区别是这个可以选择插入的位置
它需要插入到某一个子元素之前的位置,一次需要哪个子元素,insertBefore()有两个参数,第一个是需要插入的元素,第二个是参数在谁之前插入


6.5 删除了替换元素

6.5.1 元素的替换
.replaceChild(新的变量名,旧的变量名);
元素的替换实在父元素中一个子元素需要被另一个新的子元素所替代,使用replaceChild()方法

6.5.2 元素的删除
在父元素的一个子元素需要删除,使用removeChild()方法,将需要删除的元素放入括号;


6.6元素查找

6.6.1 节点的属性
节点实在dom树上的每一个节点,其中包括元素.文本.属性.注释等等,常用的有三个:元素/文本/属性
节点的属性:.nodeName/.nodeValue/nodeType

6.6.2 层次节点
节点可以分为:父节点与子节点/兄弟节点,当我们知道其中之一的时候,可以用一些方法找到另一个

6.6.3获取所有节点
使用childNodes属性拿到的是该元素下所有的节点,包含所有节点类型,不单单只是元素

6.6.4 获取第一个和最后一个子节点
.firstChild/.lastChild注意:;不一定是元素节点

6.6.5获取父节点
使用.parentNode属性可以拿到该元素的父节点,注意父节点只有一个 

6.6.6 获取兄弟节点
使用previousSibling和nextSibling可以获得该元素的前一个和后一个兄弟节点,只能获取一个

6.7 元素的宽高属性
需要获取一个元素的宽度和高度,使用style是无法获取的
所有用offsetWidth和offsetHeight,改属性可以获取元素的占位宽高,它也包含了内边距和边框
clientWidth也可以获取,但不包内边距和边框

6.8 子元素与父元素的距离
.offsetLeft和offsetTop是距离body左边界和上边界的距离,但如果该子元素使用了定位属性,则参照的就不是body而是距离他最近的父级元素